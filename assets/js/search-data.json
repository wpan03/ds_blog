{
  
    
        "post0": {
            "title": "Notes from Data Science at the Command Line",
            "content": "In this post, I want to write down some ideas from Jeroen Janssens’s book Data Science at the Command Line, 2e. Instead of being a comprehensive overview of the book, this note only picks some ideas that add to my existing knowledge and hopefully it can bring some new thoughts to you. Of course, this blog post reflects my personal understanding and all errors remain mine. . Introduction . The original book can be divided into two parts. The first part covers how to use the command line to do four essential parts of data science: (1) obtaining data, (2) scrubbing data, (3) exploring data, (4) modeling data. The second part of the book introduces some useful command-line tools and methods for doing data science, including: (1) create command-line tools with shell script, Python and R; (2) use Makefile to do project and pipeline management; (3) implement parallel computing in the command line; (4) incorporate command line tools into other programming languages, including Python, R and Spark. . However, to summarize my learning, I will break this blog post into four parts: . Useful tools: some command line packages and tools, including Docker, Make, and few other packages. | Syntax tricks: some useful syntax that can be helpful for daily work. | Integration with Python: how to combine the power of command line tools with Python. | Useful Resources: some interesting resources for further learning. | . Useful Tools . Docker . Docker in itself is a fascinating but complex topic and thus is beyond the scope of this blog and the original book. However, one idea I learn from the book is how the author uses Docker as an educational tool, which allows users to set up the same environment and follow the book easily. After installing Docker, just running two lines of code in the command line will set up the prepared environment from the book. . docker pull datasciencetoolbox/dsatcl2e docker run --rm -it datasciencetoolbox/dsatcl2e . Another trick about Docker I learned is how the author uses the -v flag to get data in and out of container with a command like the following. (In macOS or Linux). . docker run --rm -it -v &quot;$(pwd)&quot;:/data datasciencetoolbox/dsatcl2e . The author recommended another book called Docker: Up &amp; Running to learn more about Docker. You can also see this A Docker Tutorial for Beginners to learn more about Docker. . Make . I was fortunate enough to learn and use make in the past, which is one of the most valuable tools I learned in 2021. If you haven’t learned, you should check out chapter 6 of Data Science at the Command Line, 2e to learn about it. make provides a nice way to build a data science pipeline and simplify complex commands. . I will only highlight few tips I learn from chapter 6 here. . If the configuration file is not called Makefile (usually you shouldn’t do this), you can run still run the file with a -f flag. For example, if you name the configuration file hello.make, I can run it with the following: . make -f hello.make . | You can use the automatic variable $@ to avoid some duplicates. For example, the following two commands will be equivalent. . numbers: seq 7 &gt; $@ numbers: seq 7 &gt; numbers . | We can change the configuration of the make with the following codes in the top of the Makefile . SHELL := bash .SHELLFLAGS := -eu -o pipefail -c . I will directly quote the author to explain this: . All rules are executed in a shell, which by default, is sh. With the SHELL variable we can change this to another shell, like bash. This way we can use everything that Bash has to offer such as for loops. | The .SHELLFLAGS line makes Bash more strict, which is considered a best practice. For example, because of this, the pipeline in the rule for target top10 now stops as soon as there is an error. | | Other tools . There are two command line packages introduced in the book I particularly like: bat and tldr. Note that usually these two tools are not pre-installed and thus you need to install them with instructions from the link. . bat is an enhanced version of the common command-line tool cat. The following picture shows three benefits from bat: . It provides syntax highlighting. | It shows modification information from git (see the red line in line 10). | When showing a long file, instead of overwhelming the terminal with all the information like cat, it pipes the output to a pager like the less command. | . . tldr aims to simplify the man command manual with concrete examples. Consider the following two manuals for the find command. . . . If you are not looking for some advanced and specific usages, the output page from tldr provides simpler and more useful instructions for understanding a command. . Syntax Trick . There are several useful syntaxes I learn from the book. . The following command prints the variable in the variable PATH into separate lines, which can be helpful to debug issues around the environment path. . echo $PATH | tr &#39;:&#39; &#39; n&#39; . | Shebang . From the book: “The shebang is a special line in the script that instructs the system which executable it should use to interpret the commands.” | You can see an example of shebang below. (#!/usr/bin/env python in the Python script). | The author recommends using commands like !/usr/bin/env bash instead of !/usr/bin/bash because this can avoid errors when executables are not in /usr/bin. | . | Integration with Python . Another useful thing I learned is to combine shell commands with Python. Specifically, there are two ways: (1) using shell command in Jupyter; (2) using Python to write shell scripts. . Shell Command in Jupyter . In a Python code shell of jupyter notebook or jupyter lab, we can call use shell commands by adding ! before the command. For example, we can list the file in the current directory with . ! ls . Or even assign the output of the command line to a Python variable. For example, we can do: . file_list = ! ls . This functionality allows us to utilize the brevity of shell commands to achieve things quickly. One example the author gives in the book is about downloading a file from the Internet. . url = &quot;https://www.gutenberg.org/files/11/old/11.txt&quot; # Command line way (curly braces allow us to add python variable) ! curl &#39;{url}&#39; &gt; alice3.txt # Python way import requests with open(&quot;alice2.txt&quot;, &quot;wb&quot;) as f: response = requests.get(url) f.write(response.content) . As we can see, the command line achieves the same thing with less code but still being easy to understand. . Another syntax trick is that if you want to use literal curly braces for command line, you can type it twice in jupyter like the following: . ! rm -v alice{{2,3}}.txt . Use Python to Write Shell Scripts . We can create a shell script with Python and combine it into a command line pipeline. One example the author gives in the book is a script for the Fizz Buzz problem. The script is called fizzbuzz.py. . #!/usr/bin/env python import sys CYCLE_OF_15 = [&quot;fizzbuzz&quot;, None, None, &quot;fizz&quot;, None, &quot;buzz&quot;, &quot;fizz&quot;, None, None, &quot;fizz&quot;, &quot;buzz&quot;, None, &quot;fizz&quot;, None, None] ## See the usage of type hint with :int and -&gt; str def fizz_buzz(n: int) -&gt; str: ## In Python, (None or 1) = 1 (&#39;buzz&#39; or 5) = &#39;buzz&#39; ## if the first element in or is evaluated as ## None or False, it will go to the second element return CYCLE_OF_15[n % 15] or str(n) if __name__ == &quot;__main__&quot;: try: ## See the walrus operator := below ## which allows assign and evaluate at the same time while (n:= sys.stdin.readline()): print(fizz_buzz(int(n))) except: pass . With this script, you can combine it into a command line pipeline with the following command, which will show the result of Fizz Buzz problem for number from 1 to 30. . seq 30 | ./fizzbuzz.py | column -x . Another thing I like is the way the author writes the Python code. In the simple script above, we can learn several Python techniques, including the walrus operator introduced in Python 3.8, type hint for functions, and the usage of or. I wrote my own comment with ## in the command to annotate them. . Useful Resources . The first resource is definitely to read through the book Data Science at the Command Line, 2e, which has a free online version. This blog only reflects my personal learning. Given everyone’s unique background, you are likely to learn something different from the book. In addition to that, the author also recommends several resources inside the book which I find interesting: . Thinking with Data: this book seems to be a friendly introduction to how to approach real-world problems with a data-driven approach | Explain Shell: a useful website that parses a command in the shell and explain the usage of each part | Ten Essays on Fizz Buzz: a book that discusses very aspects of Python and software design more general through 10 solutions for the Fizz Buzz problem | Pro Git: a comprehensive guide to git | Regular Expressions Cookbook: a guide for regular expressions | . I hadn’t read any of the books above in detail but plan to do so and will try to share my notes for them once I finished. .",
            "url": "https://wpan03.github.io/ds_blog/2021/08/19/ds_cmd.html",
            "relUrl": "/2021/08/19/ds_cmd.html",
            "date": " • Aug 19, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Entity Embedding in fastai 2",
            "content": "This post aims to introduce how to use fastai v2 to implement entity embedding for categorical variables in tabular data. Entity embedding is a powerful technique that can sometimes boost the performance of various machine learning methods and reveal the intrinsic properties of categorical variables. See this paper and this post for more details. . import seaborn as sns from fastai.tabular.all import * . Get Data . We will use the California housing dataset for this post. We want to develop a model to predict the median_house_value based on other variables in the dataset. The following code shows the first 5 rows of the dataset. . df = pd.read_csv(&#39;housing.csv&#39;) df.head() . longitude latitude housing_median_age total_rooms total_bedrooms population households median_income median_house_value ocean_proximity . 0 -122.23 | 37.88 | 41.0 | 880.0 | 129.0 | 322.0 | 126.0 | 8.3252 | 452600.0 | NEAR BAY | . 1 -122.22 | 37.86 | 21.0 | 7099.0 | 1106.0 | 2401.0 | 1138.0 | 8.3014 | 358500.0 | NEAR BAY | . 2 -122.24 | 37.85 | 52.0 | 1467.0 | 190.0 | 496.0 | 177.0 | 7.2574 | 352100.0 | NEAR BAY | . 3 -122.25 | 37.85 | 52.0 | 1274.0 | 235.0 | 558.0 | 219.0 | 5.6431 | 341300.0 | NEAR BAY | . 4 -122.25 | 37.85 | 52.0 | 1627.0 | 280.0 | 565.0 | 259.0 | 3.8462 | 342200.0 | NEAR BAY | . Preprocess Data . We rely on various functionalities provided by fastai to preprocess the data. We will not discuss them in detail here. For more information, please check this tutorial. One important note is that when dealing with categorical variables, instead of using one-hot encoding, we map each category into a distinct integer. . cont, cat = cont_cat_split(df, dep_var = &#39;median_house_value&#39;) . splits = RandomSplitter(valid_pct=0.2)(range_of(df)) . to = TabularPandas(df, procs=[Categorify, FillMissing,Normalize], cat_names = cat, cont_names = cont, y_names=&#39;median_house_value&#39;, splits=splits) . dls = to.dataloaders(bs=64) . Train Model . We will train a deep learning model to predict the median housing value and thus get the trained embedding for categorical variables. Again, see this tutorial for details about the meaning of the codes here. . learn = tabular_learner(dls, metrics=rmse) . early_stop_cb = EarlyStoppingCallback(patience=2) . learn.fit_one_cycle(10, cbs=early_stop_cb) . epoch train_loss valid_loss _rmse time . 0 | 55994937344.000000 | 56636186624.000000 | 237983.578125 | 00:04 | . 1 | 56567816192.000000 | 56058937344.000000 | 236767.671875 | 00:04 | . 2 | 52564221952.000000 | 52214001664.000000 | 228503.843750 | 00:03 | . 3 | 45972250624.000000 | 46276349952.000000 | 215119.375000 | 00:03 | . 4 | 37385846784.000000 | 37008117760.000000 | 192374.937500 | 00:03 | . 5 | 31154010112.000000 | 30351321088.000000 | 174216.312500 | 00:03 | . 6 | 24364992512.000000 | 23757260800.000000 | 154133.906250 | 00:03 | . 7 | 22229555200.000000 | 21549965312.000000 | 146799.031250 | 00:03 | . 8 | 20496922624.000000 | 21110308864.000000 | 145293.875000 | 00:03 | . 9 | 20571899904.000000 | 20511488000.000000 | 143218.312500 | 00:03 | . . Get Embedding . We will retrieve the trained embedding matrix from the model. . embs = [param for param in learn.model.embeds.parameters()] . The list has two elements and each element represents an embedding matrix for a categorical variable. . len(embs) . 2 . To check what each element corresponds to, we can use the cat_names attributes from TabularPandas. The list indicates that the first element in embs is the embedding matrix for the variable ocean_proximity. . to.cat_names . (#2) [&#39;ocean_proximity&#39;,&#39;total_bedrooms_na&#39;] . Let&#39;s see this matrix. Note that we convert it from a tensor array to a numpy array to make the operation later easier. . ocean_emb = embs[0].detach().numpy() ocean_emb . array([[ 0.00074246, 0.01322438, -0.00539126, 0.00066858], [-0.01550745, -0.02467075, 0.01956671, -0.01148492], [ 0.24266721, 0.35117084, -0.35875005, 0.36369336], [-0.05629548, -0.06088502, 0.08677642, -0.10355063], [-0.01115109, -0.02015582, 0.01277605, -0.00476734], [-0.01796132, -0.02396758, 0.02242134, -0.0143294 ]], dtype=float32) . Each row in the matrix above corresponds to one category in the categorical variable. The categories for ocean_proximity are the following. . cat = to.procs.categorify ocean_cat = cat[&#39;ocean_proximity&#39;] ocean_cat . [&#39;#na#&#39;, &#39;&lt;1H OCEAN&#39;, &#39;INLAND&#39;, &#39;ISLAND&#39;, &#39;NEAR BAY&#39;, &#39;NEAR OCEAN&#39;] . We can use the o2i attribute to see how each category is mapped into an integer. The integer corresponds to the row in the embedding matrix. . ocean_cat.o2i . defaultdict(int, {&#39;#na#&#39;: 0, &#39;&lt;1H OCEAN&#39;: 1, &#39;INLAND&#39;: 2, &#39;ISLAND&#39;: 3, &#39;NEAR BAY&#39;: 4, &#39;NEAR OCEAN&#39;: 5}) . For example, the embedding for &#39;NEAR BAY&#39; is: . ocean_emb[4] . array([-0.01115109, -0.02015582, 0.01277605, -0.00476734], dtype=float32) . Let&#39;s create a dictionary to map each category to its corresponding embedding. . ocean_emb_map = {ocean_cat[i]:ocean_emb[i] for i in range(len(ocean_cat))} . Apply Embedding . This section shows how we can apply the embedding to the original dataset; that is, change the category variable to numeric vectors. . emb_dim = ocean_emb.shape[1] . col_name = [f&#39;ocean_emb_{i}&#39; for i in range(1,emb_dim+1)] df_emb = pd.DataFrame(df[&#39;ocean_proximity&#39;].map(ocean_emb_map).to_list(), columns=col_name) df_emb.head() . ocean_emb_1 ocean_emb_2 ocean_emb_3 ocean_emb_4 . 0 -0.011151 | -0.020156 | 0.012776 | -0.004767 | . 1 -0.011151 | -0.020156 | 0.012776 | -0.004767 | . 2 -0.011151 | -0.020156 | 0.012776 | -0.004767 | . 3 -0.011151 | -0.020156 | 0.012776 | -0.004767 | . 4 -0.011151 | -0.020156 | 0.012776 | -0.004767 | . df_new = pd.concat([df, df_emb],axis=1) . Visualize Embedding . Another way to explore the embedding matrix is to visualize it and see what it learns. We will use principle component analysis(PCA) to visualize the embedding. . from sklearn import decomposition pca = decomposition.PCA(n_components=2) pca_result = pca.fit_transform(ocean_emb) . df_visualize = pd.DataFrame({&#39;name&#39;:ocean_cat, &#39;dim1&#39;:pca_result[:,0], &#39;dim2&#39;: pca_result[:,1]}) sns.scatterplot(data=df_visualize, x=&#39;dim1&#39;, y=&#39;dim2&#39;, hue=&#39;name&#39;); . If we compare this visualization to the map of these houses above, we will find that the embedding matrix does provide some useful insights. In particular, we see that the relative location of the category INLAND does correspond to the inland area in the map. The code to make the following map comes from this notebook. . Ending Note . This is the end of this post. You can see the full code by clicking to the View on Github or Open in Colab tab at the top this post. .",
            "url": "https://wpan03.github.io/ds_blog/2020/12/21/fastai_emb.html",
            "relUrl": "/2020/12/21/fastai_emb.html",
            "date": " • Dec 21, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Logistic Regression's Coefficients Explanation",
            "content": "This post is going to introduce logistic regression with an emphasis on explaining the coefficients in the output of Python&#39;s statsmodels. . import numpy as np import pandas as pd import matplotlib.pyplot as plt . . 1. Background . Logistic regression is used to solve the classification problem. Classification problem means the dependent variable is categorical. For example, we can build a machine learning model to predict whether a student will be admitted to college based on metrics like his or her GPA, standardized test scores. If we formulate a classification problem in mathematical form, we have: . $$y = beta_{0} + beta_{1}x_{1} + beta_{2}x_{2}$$, . where y is a categorical variable, like whether you are admited or not. . One way to approach this problem is by using linear regression. However, we would like our algorithm will output a number between 0 and 1, which can indicate the probability of an observation belonging to a certain category. Linear regression does not satisfy this requirement as it might output values smaller than 0 or larger than 1. . One solution is to solve this problem is to transform the value of $ beta_{0} + beta_{1}x_{1} + beta_{2}x_{2}$ to the range of [0,1]. We can do this with the logistic function: $$f(x)= frac{e^{x}}{1+e^{x}}$$. . To show that logistic regression will make a number between 0 and 1. Let&#39;s make a plot of it. . def logit(x): return np.exp(x)/(1+np.exp(x)) . x = np.arange(-200, 200, 0.1) y = logit(x) plt.plot(x,y); . As we can see, the logit function has a S shape and is bounded by 0 and 1. When x is approaching positive infinity, the logit of x approaches 1. When x is approaching negative infinity, the logit of x approaches 0. . Thus, we can transform the value of $ beta_{0} + beta_{1}x_{1} + beta_{2}x_{2}$ to: . $$ p(X)= frac{e^{ beta_{0} + beta_{1}x_{1} + beta_{2}x_{2}}}{1+e^{ beta_{0} + beta_{1}x_{1} + beta_{2}x_{2}}} $$Now the output of our regression will fall between zero and one. Since we the logistic function to achieve this, the regression is called logistic regression. Before jumping into the details of behind it, let&#39;s first we how to run it in python. . 2. Python Implementation of Logistic Regression . For this post, we are going to use a college admission dataset from UCLA&#39;s Institute for Digital Research &amp; Education. We want to use a student&#39;s GRE score, GPA, and rank to predict whether the student will be admitted. . df = pd.read_csv(&quot;https://stats.idre.ucla.edu/stat/data/binary.csv&quot;) . df.head() . admit gre gpa rank . 0 0 | 380 | 3.61 | 3 | . 1 1 | 660 | 3.67 | 3 | . 2 1 | 800 | 4.00 | 1 | . 3 1 | 640 | 3.19 | 4 | . 4 0 | 520 | 2.93 | 4 | . We are going to use the statsmodel package to run the logistic regression. We choose statsmodel because its interface and summary of the result are more similar to other statistical software, like R and Stata. . import statsmodels.formula.api as smf . mod = smf.logit(formula=&#39;admit ~ gre + gpa + rank&#39;, data=df).fit() . Optimization terminated successfully. Current function value: 0.574302 Iterations 6 . . print(mod.summary()) . Logit Regression Results ============================================================================== Dep. Variable: admit No. Observations: 400 Model: Logit Df Residuals: 396 Method: MLE Df Model: 3 Date: Tue, 02 Feb 2021 Pseudo R-squ.: 0.08107 Time: 09:16:16 Log-Likelihood: -229.72 converged: True LL-Null: -249.99 Covariance Type: nonrobust LLR p-value: 8.207e-09 ============================================================================== coef std err z P&gt;|z| [0.025 0.975] Intercept -3.4495 1.133 -3.045 0.002 -5.670 -1.229 gre 0.0023 0.001 2.101 0.036 0.000 0.004 gpa 0.7770 0.327 2.373 0.018 0.135 1.419 rank -0.5600 0.127 -4.405 0.000 -0.809 -0.311 ============================================================================== . 3. Interpretation of the Result . 3.1 Prediction . Let&#39;s make a prediction for a student with GRE 300, GPA 2, and rank 4. . a_new_student = np.array([1, 300, 2, 4]) . We extract the parameters from the logistic regression model to make the prediction. . model_parameters = mod.params.values model_parameters . array([-3.44954840e+00, 2.29395950e-03, 7.77013574e-01, -5.60031387e-01]) . Note that the following calculation can be made much easier with matrix multiplication with code like a_new_student @ model_parameters. . pred = 0 for i in range(4): pred += model_parameters[i] * a_new_student[i] pred . -3.4474589462957206 . Note that the result is negative. Did we say in the previous section the logistic regression guarantees a prediction between 0 and 1? Then why do we get this negative prediction? To understand this, we need to understand the relationship between three terms - probability, odd, and log-odd. . 3.2 Probability, odd, log-odd . Let $k = beta_{0} + beta_{1}x_{1} + beta_{2}x_{2} + beta_{3}x_{3}$. As we discussed in section 1, we have: $p(X)= frac{e^{k}}{1+e^{k}}$, which is the probability of X belonging to a certain class. . Then, $p(x) + p(x)e^k = e^k$. Then $p(x) = e^k - p(x)e^k = e^k(1-p(x))$. Thus, $e^{k} = frac{p(x)}{1-p(x)}$. The quantity $ frac{p(x)}{1-p(x)}$ is called the odds. . Taking log from both side the odds equation, we have $k= log( frac{p(x)}{1-p(x)})$. This quantity $log( frac{p(x)}{1-p(x)})$ the log-odds. . Bringing back the value of k, we have: $log( frac{p(x)}{1-p(x)}) = beta_{0} + beta_{1}x_{1} + beta_{2}x_{2} + beta_{3}x_{3}$. . What we are actually evaluating when running the python code in the section is the equation above. Thus, the prediction we made is not the probability, but the log-odds. . To evaluate the probability, we can put the log-odds we predict back to the formula $p(X)= frac{e^{k}}{1+e^{k}}$, as k is the log-odd we predict. . In code, we have: . def prob_from_log_odd(log_odds): prob = np.exp(log_odds)/(1+np.exp(log_odds)) return prob . Using the prediction we have in section 3.1, we have: . print(&quot;The log odd is: &quot;, pred) print(&quot;The probability is: &quot;, prob_from_log_odd(pred)) . The log odd is: -3.4474589462957206 The probability is: 0.03084472943016926 . Note that the probability is about 0.03, which is between 0 and 1. To determine whether the student will be admitted or not, we usually set a 0.5 as the threshold. For students with predicted probability lower than 0.5, we will predict the result as reject. Otherwise, we will predict the result as admit. . 3.3 Coefficient Explanation . Based on the discussion in section 3.2, the explanation of a specific coefficient of the logistic regression is that given all other variables being the same, how much log-odd will change given one unit increase of the independent variable. For example, the coefficient for gre is about 0.0023, which can be interpreted as given all other variables being the same, one additional GRE score will lead to a 0.0023 increase of the log odd. . 4. Estimation Method . One question we did not answer so far is that how do we get the estimation of these coefficients for logistic regression. The estimation uses a statistical method called maximum likelihood estimation. The details for this method is beyond the scope of this post. The book The Elements of Statistical Learning gives a detailed discussion of the estimation process in section 4.4. A Python implementation of the estimation from scratch can be found in this post. .",
            "url": "https://wpan03.github.io/ds_blog/2020/11/20/logistic.html",
            "relUrl": "/2020/11/20/logistic.html",
            "date": " • Nov 20, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "What I wish I knew about R",
          "content": "As the title suggested, I want to share some ideas I learned from my experience of using R. The article has two parts: . Editor Tricks: this part discusses some keyboard shortcuts, rstudio tricks and rmarkdown tricks that hopefully can improve your productivity. . | Good Package: this part talks about some packages I really like. As usual, suggesting package can be opinionated. Those packages might also be outdated as the field of data science moves swiftly. However, this reflects my best understanding now and I hope it can at least bring some new ideas to you. . | . Editor Tricks . Keyboard Shortcut . Mastering the keyboard shortcut for a editor or IDE can be very helpful for productivity but also very challenging. So I want to highlight some of them that I find particular helpful. Note that I use a Mac and so I will write the shortcut’s Mac version. But the command should work once you replace cmd/control with crtl and Option with Alt. A full list of keyboard shortcut can be found here. . control + shift + 0: move R studio back to the usual four panes mode . | control + shift + 1: maximize the R script, notebook, or R Markdown file you are working in . | cmd + shift + c: comment / uncomment the current line . | cmd + option + i: insert a R chunk in Rmarkdown . | cmd + shift + enter: run the current code chunk in Rmarkdown . | cmd + shift + M: insert the pipe operator %&gt;% inside R code . | option + -: insert &lt;- inside R code . | control + shift + O: open/close document outline . | . Rstudio Tricks . These features discussed here are released in R studio 1.4. So to have these features, your R studio need to have at least version 1.4. The R studio blog did a great job to demonstrate these features and thus I will not repeat the demo here. Please do open the links in this section to check them out. . Visual Markdown Editing: with this feature, you can edit a markdown file in R studio and see the preview result for markdown immediately. Please see how to use it here. . | Citation Support: inserting citations in Rmarkdown becomes very easy with this feature. Check it out here. . | Rainbow Parentheses: this feature gives color to the those nested parentheses in R. See here. . | Outline mode in R script: this feature allows you to better organize your .R script. See how it works here. The keyboard shortcut control + shift + O can also open outline mode in R script. . | . Rmarkdown . From those features above, you might already feel that R Markdown is a very powerful and flexible document format. In fact, this document you are reading now is written with R Markdown. The book R Markdown: The Definitive Guide gives a detailed descriptions about many features of R markdown. I just want to highlight few sections I find particular helpful. . Markdown syntax: if you are not familiar with the basic syntax of markdown file, see this section. . | R chunk: one thing that is very powerful but can be confusing is the configuration of R chunk in R markdown. For example, you might see a code chunk below. What does eval and echo and many other possible words mean? This section discusses those. . | . {eval=TRUE, echo=TRUE} x &lt;- rnorm(100) . HTML Generation: there are many ways to customize the html file you generate from R markdown. Tricks I like include: generating table of content and displaying a dataframe beautifully. Check out this section for how to do those and many other things. | . There are a lot of other features we don’t highlight here, such as generating presentation and customizing the pdf output. Check out relevant sections in the book if you want to learn these. . Good Packages . Dplyr . Given the popularity of dplyr package, it seems unnecessary to advocate for it here. However, R provides several ways to manipulate dataframe, including the operation from Base R, dplyr and data.table and it might be hard to choose which one to master first. In addition to its intuitive syntax and nice integration of other parts of the tidyverse ecosystem, I want to give few other reasons to discuss why mastering dplyr first can be a good choice. . speed: usually, data.table excels at manipulating dataframe in a larger scale and having good computational performance. However, there is a package called dtplyr that allows you to use the intuitive syntax of dplyr and has almost same speed as data.table with very little change of syntax. . | spark: if you want to use Spark in R, the package sparklyr has very similar syntax as . | . Tidymodels . One thing I once found annoying about R is that you need to learn a lot of different packages and slightly different syntax to implement different machine learning models. In contrast, scikit-learn in Python provides a unified and consistent interface for different machine learning models. However, when I discover tidymodels pacakge, I feel that this might no longer be the case. Note that there are other efforts like caret to achieve the same thing. Personally, I find tidymodels easier to use. (Actually, caret and tidymodels are developed by the same author and tidymodels is the current focus of the author). . You can take a quick look of this document to get why tidymodels provides a consistent interface. To learn this package, this series of article provides a great introduction. There is also the free book Tidy Modeling with R that introduces how to do machine learning modeling in more details. . Plotly . The package ggplot2 plays a dominant role in data visualization world in R and it is indeed very beautifully designed. But I want to introduce another package called plotly that might be very helpful in doing visualization in R. . First, if you like ggplot2, there is a function called ggplotly that generates the output of ggplot in a interactive form. Consider the following example. . {r, message=FALSE} library(ggplot2) library(plotly) . fig &lt;- ggplot(mpg, aes(displ, hwy, colour = class)) + geom_point() ggplotly(fig) . In addition to that, the syntax and default display of `plotly` is also quite good. For example, we can do the scatter plot above with following code in `plotly`. {r, message=FALSE} plot_ly(data = mpg, x = ~displ, y = ~hwy, color = ~ class, type = &#39;scatter&#39;) . I think it is worthwhile to add plotly into your toolbox. . Endnotes . Thanks for reading this article and I hope it brings you some new ideas. I will try to update this article as I learn new things in my data science journey. .",
          "url": "https://wpan03.github.io/ds_blog/R_blog/R_tricks.Rmd",
          "relUrl": "/R_blog/R_tricks.Rmd",
          "date": ""
      }
      
  

  
      ,"page2": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://wpan03.github.io/ds_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://wpan03.github.io/ds_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}